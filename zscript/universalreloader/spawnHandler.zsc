// Struct for itemspawn information.
class URLSpawnItem play {

    // ID by string for spawner
    string spawnName;

    // ID by string for spawnees
    Array<URLSpawnItemEntry> spawnReplaces;

    // Whether or not to persistently spawn.
    bool isPersistent;

	// Whether or not to replace the original item.
    bool replaceItem;

    string toString() {

        let replacements = "[";

        foreach (spawnReplace : spawnReplaces) replacements = replacements..", "..spawnReplace.toString();

        replacements = replacements.."]";

        return String.format("{ spawnName=%s, spawnReplaces=%s, isPersistent=%b, replaceItem=%b }", spawnName, replacements, isPersistent, replaceItem);
    }
}

class URLSpawnItemEntry play {

    string name;
    int    chance;

    string toString() {
        return String.format("{ name=%s, chance=%s }", name, chance >= 0 ? "1/"..(chance + 1) : "never");
    }
}

// Struct for passing useinformation to ammunition.
class URLSpawnAmmo play {

    // ID by string for the header ammo.
    string ammoName;
    
    // ID by string for weapons using that ammo.
    Array<string> weaponNames;
    
    string toString() {

        let weapons = "[";

        foreach (weaponName : weaponNames) weapons = weapons..", "..weaponName;

        weapons = weapons.."]";

        return String.format("{ ammoName=%s, weaponNames=%s }", ammoName, weapons);
    }
}



// One handler to rule them all.
class URLSpawnHandler : EventHandler {

    // List of persistent classes to completely ignore.
    // This -should- mean this mod has no performance impact.
    static const string blacklist[] = {
        'HDSmoke',
        'BloodTrail',
        'CheckPuff',
        'WallChunk',
        'HDBulletPuff',
        'HDFireballTail',
        'ReverseImpBallTail',
        'HDSmokeChunk',
        'ShieldSpark',
        'HDFlameRed',
        'HDMasterBlood',
        'PlantBit',
        'HDBulletActor',
        'HDLadderSection'
    };

	// List of CVARs for Backpack Spawns
	array<Class <Inventory> > backpackBlacklist;

    // List of weapon-ammo associations.
    // Used for ammo-use association on ammo spawn (happens very often).
    Array<URLSpawnAmmo> ammoSpawnList;

    // List of item-spawn associations.
    // used for item-replacement on mapload.
    Array<URLSpawnItem> itemSpawnList;

    Array<HDRel_Recipe> recipes;

    bool cvarsAvailable;

    // appends an entry to itemSpawnList;
    void addItem(string name, Array<URLSpawnItemEntry> replacees, bool persists, bool rep=true) {

        if (hd_debug) {

            let msg = "Adding "..(persists ? "Persistent" : "Non-Persistent").." Replacement Entry for "..name..": [";

			foreach (replacee : replacees) msg = msg..", "..replacee.toString();

            console.printf(msg.."]");
        }

        // Creates a new struct;
        URLSpawnItem spawnee = URLSpawnItem(new('URLSpawnItem'));

        // Populates the struct with relevant information,
        spawnee.spawnName = name;
        spawnee.isPersistent = persists;
        spawnee.replaceItem = rep;
        spawnee.spawnReplaces.copy(replacees);

        // Pushes the finished struct to the array.
        itemSpawnList.push(spawnee);
    }

    URLSpawnItemEntry addItemEntry(string name, int chance) {

        // Creates a new struct;
        URLSpawnItemEntry spawnee = URLSpawnItemEntry(new('URLSpawnItemEntry'));
        spawnee.name = name;
        spawnee.chance = chance;
        return spawnee;
    }

    // appends an entry to ammoSpawnList;
    void addAmmo(string name, Array<string> weapons) {

        if (hd_debug) {
            let msg = "Adding Ammo Association Entry for "..name..": [";

            foreach (weapon : weapons) msg = msg..", "..weapon;

            console.printf(msg.."]");
        }

        // Creates a new struct;
        URLSpawnAmmo spawnee = URLSpawnAmmo(new('URLSpawnAmmo'));
        spawnee.ammoName = name;
        spawnee.weaponNames.copy(weapons);

        // Pushes the finished struct to the array.
        ammoSpawnList.push(spawnee);
    }

    void addRecipe(string amcls, int enabled,
        class<HDRel_CraftingMaterial> projMat,   int projCost, double projProd,
        class<HDRel_CraftingMaterial> casingMat, int csgCost,  double csgProd,
        class<HDRel_CraftingMaterial> powderMat, int pwdCost,  double pwdProd,
        double speed
    ) {
        HDRel_Recipe r;

        if (r = HDRel_Recipe.tryCreate(amcls, enabled,
            projMat, projCost, projProd,
            casingMat, csgCost, csgProd,
            powderMat, pwdCost, pwdProd,
            speed)
        ) {
            if (hd_debug) console.printf("Adding Universal Reloader Crafting Recipe for "..amcls);

            recipes.push(r);
        }
    }


    // Populates the replacement and association arrays.
    void init() {
        
        cvarsAvailable = true;
		
		//-----------------
		// Backpack Spawns
		//-----------------

        if (!url_allowBackpacks)        backpackBlacklist.push((Class<Inventory>)('HDUniversalReloader'));
        if (!gsp_allowBackpacks)        backpackBlacklist.push((Class<Inventory>)('GunsmithPouch'));
		
        if (!rawBrass_allowBackpacks)   backpackBlacklist.push((Class<Inventory>)('HDRel_RawBrass'));
        if (!rawFuel_allowBackpacks)    backpackBlacklist.push((Class<Inventory>)('HDRel_RawFuel'));
        if (!rawLead_allowBackpacks)    backpackBlacklist.push((Class<Inventory>)('HDRel_RawLead'));
        if (!rawPlastic_allowBackpacks) backpackBlacklist.push((Class<Inventory>)('HDRel_RawPlastic'));
        if (!rawPowder_allowBackpacks)  backpackBlacklist.push((Class<Inventory>)('HDRel_RawPowder'));
        if (!rawSteel_allowBackpacks)   backpackBlacklist.push((Class<Inventory>)('HDRel_RawSteel'));

        //---------------------
        // Crafting Materials
        //---------------------

        Array<String> mat_brass;
        mat_brass.push('HDUniversalReloader');
        addAmmo('HDRel_RawBrass', mat_brass);

        Array<String> mat_fuel;
        mat_fuel.push('HDUniversalReloader');
        addAmmo('HDRel_RawFuel', mat_fuel);

        Array<String> mat_lead;
        mat_lead.push('HDUniversalReloader');
        addAmmo('HDRel_RawLead', mat_lead);

        Array<String> mat_plastic;
        mat_plastic.push('HDUniversalReloader');
        addAmmo('HDRel_RawPlastic', mat_plastic);

        Array<String> mat_powder;
        mat_powder.push('HDUniversalReloader');
        addAmmo('HDRel_RawPowder', mat_powder);

        Array<String> mat_steel;
        mat_steel.push('HDUniversalReloader');
        addAmmo('HDRel_RawSteel', mat_steel);

        //---------------------
        // Crafting Recipes
        //---------------------

        string projectileMats[4] = { '', 'HDRel_RawLead', 'HDRel_RawPlastic', 'HDRel_RawSteel' };
        string casingMats[4]     = { '', 'HDRel_RawBrass', 'HDRel_RawPlastic', 'HDRel_RawSteel' };
        string powderMats[3]     = { '', 'HDRel_RawFuel', 'HDRel_RawPowder' };

        //            Crafting Result;         Projectile mat, cost, produced;
        //                                     Casingm Mat,    cost, produced;
        //                                     Powder mat,     cost, produced;
        //                                     Speed.

        // VANILLA HDEST

        // 9mm
        if (url_9mm_enabled) {
            addRecipe('HDPistolAmmo',          url_9mm_enabled,
                                               projectileMats[url_9mm_projMat], url_9mm_projAmt,   url_9mm_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_9mm_casingMat],   url_9mm_casingAmt, url_9mm_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_9mm_powderMat],   url_9mm_powderAmt, url_9mm_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_9mm_speed);
            addRecipe('HDSpent9mm',            url_9mm_enabled,
                                               null,                            0,                 0.00,
                                               casingMats[url_9mm_casingMat],   url_9mm_casingAmt, url_9mm_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                            0,                 0.00,
                                               url_9mm_speed);
        }

        // .355
        if (url_355_enabled) {
            addRecipe('HDRevolverAmmo',        url_355_enabled,
                                               projectileMats[url_355_projMat], url_355_projAmt,   url_355_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_355_casingMat],   url_355_casingAmt, url_355_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_355_powderMat],   url_355_powderAmt, url_355_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_355_speed);
            addRecipe('HDSpent355',            url_355_enabled,
                                               null,                            0,                 0.00,
                                               casingMats[url_355_casingMat],   url_355_casingAmt, url_355_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                            0,                 0.00,
                                               url_355_speed);
        }

        // 12ga Shells
        if (url_12gaShells_enabled) {
            addRecipe('HDShellAmmo',           url_12gaShells_enabled,
                                               projectileMats[url_12gaShells_projMat], url_12gaShells_projAmt,   url_12gaShells_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_12gaShells_casingMat],   url_12gaShells_casingAmt, url_12gaShells_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_12gaShells_powderMat],   url_12gaShells_powderAmt, url_12gaShells_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_12gaShells_speed);
            addRecipe('HDSpentShell',          url_12gaShells_enabled,
                                               null,                                   0,                        0.00,
                                               casingMats[url_12gaShells_casingMat],   url_12gaShells_casingAmt, url_12gaShells_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                                   0,                        0.00,
                                               url_12gaShells_speed);
        }

        // 4.26mm
        if (url_4mm_enabled) {
            addRecipe('FourMilAmmo',           url_4mm_enabled,
                                               projectileMats[url_4mm_projMat], url_4mm_projAmt,   url_4mm_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_4mm_casingMat],   url_4mm_casingAmt, url_4mm_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_4mm_powderMat],   url_4mm_powderAmt, url_4mm_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_4mm_speed);
        }

        // 7.76mm
        if (url_7mm_enabled) {
            addRecipe('SevenMilAmmo',          url_7mm_enabled,
                                               projectileMats[url_7mm_projMat], url_7mm_projAmt,   url_7mm_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_7mm_casingMat],   url_7mm_casingAmt, url_7mm_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_7mm_powderMat],   url_7mm_powderAmt, url_7mm_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_7mm_speed);
            addRecipe('SevenMilAmmoRecast',    url_7mm_enabled,
                                               projectileMats[url_7mmRecast_projMat], url_7mmRecast_projAmt,   url_7mmRecast_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_7mm_casingMat],   url_7mm_casingAmt, url_7mm_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_7mm_powderMat],   url_7mm_powderAmt, url_7mm_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_7mm_speed);
            addRecipe('SevenMilBrass',         url_7mm_enabled,
                                               null,                            0,                 0.00,
                                               casingMats[url_7mm_casingMat],   url_7mm_casingAmt, url_7mm_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                            0,                 0.00,
                                               url_7mm_speed);
        }

        // Rocquettes
        if (url_rocket_enabled) {
            addRecipe('HDRocketAmmo',          url_rocket_enabled,
                                               projectileMats[url_rocket_projMat], url_rocket_projAmt,   url_rocket_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_rocket_casingMat],   url_rocket_casingAmt, url_rocket_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_rocket_powderMat],   url_rocket_powderAmt, url_rocket_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_rocket_speed);
            addRecipe('DudRocketAmmo',         url_rocket_enabled,
                                               projectileMats[url_rocket_projMat], url_rocket_projAmt,   url_rocket_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_rocket_casingMat],   url_rocket_casingAmt, url_rocket_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_rocket_powderMat],   url_rocket_powderAmt, url_rocket_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_rocket_speed);
        }

        // H.E.A.T. Rockets
        if (url_heat_enabled) {
            addRecipe('HeatAmmo',              url_heat_enabled,
                                               projectileMats[url_heat_projMat], url_heat_projAmt,   url_heat_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_heat_casingMat],   url_heat_casingAmt, url_heat_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_heat_powderMat],   url_heat_powderAmt, url_heat_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_heat_speed);
        }

        // Bronto Bolts
        if (url_35mm_enabled) {
            addRecipe('BrontornisRound',       url_35mm_enabled,
                                               projectileMats[url_35mm_projMat], url_35mm_projAmt,   url_35mm_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_35mm_casingMat],   url_35mm_casingAmt, url_35mm_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_35mm_powderMat],   url_35mm_powderAmt, url_35mm_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_35mm_speed);
        }

        // Frag Grenades
        if (url_fragGrenade_enabled) {
            addRecipe('HDFragGrenadeAmmo',     url_fragGrenade_enabled,
                                               projectileMats[url_fragGrenade_projMat], url_fragGrenade_projAmt,   url_fragGrenade_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_fragGrenade_casingMat],   url_fragGrenade_casingAmt, url_fragGrenade_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_fragGrenade_powderMat],   url_fragGrenade_powderAmt, url_fragGrenade_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_fragGrenade_speed);
        }


        // HDBULLETLIB-RECASTED

        // 4ga 00 Buckshot
        if (url_4gb_enabled) {
            addRecipe('HD4GBAmmo',             url_4gb_enabled,
                                               projectileMats[url_4gb_projMat], url_4gb_projAmt,   url_4gb_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_4gb_casingMat],   url_4gb_casingAmt, url_4gb_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_4gb_powderMat],   url_4gb_powderAmt, url_4gb_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_4gb_speed);
            addRecipe('HDSpent4GB',            url_4gb_enabled,
                                               null,                            0,                 0.00,
                                               casingMats[url_4gb_casingMat],   url_4gb_casingAmt, url_4gb_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                            0,                 0.00,
                                               url_4gb_speed);
        }

        // 4ga Saboted Slug
        if (url_4gs_enabled) {
            addRecipe('HD4GSAmmo',             url_4gs_enabled,
                                               projectileMats[url_4gs_projMat], url_4gs_projAmt,   url_4gs_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_4gs_casingMat],   url_4gs_casingAmt, url_4gs_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_4gs_powderMat],   url_4gs_powderAmt, url_4gs_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_4gs_speed);
            addRecipe('HDSpent4GS',            url_4gs_enabled,
                                               null,                            0,                 0.00,
                                               casingMats[url_4gs_casingMat],   url_4gs_casingAmt, url_4gs_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                            0,                 0.00,
                                               url_4gs_speed);
        }

        // 5mm MR
        if (url_5mm_enabled) {
            addRecipe('HD5mm_Ammo',            url_5mm_enabled,
                                               projectileMats[url_5mm_projMat], url_5mm_projAmt,   url_5mm_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_5mm_casingMat],   url_5mm_casingAmt, url_5mm_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_5mm_powderMat],   url_5mm_powderAmt, url_5mm_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_5mm_speed);
            addRecipe('HDSpent5mmMR',          url_5mm_enabled,
                                               null,                            0,                 0.00,
                                               casingMats[url_5mm_casingMat],   url_5mm_casingAmt, url_5mm_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                            0,                 0.00,
                                               url_5mm_speed);
        }

        // 6mm Flechettes
        if (url_6mm_enabled) {
            addRecipe('HD6mmFlechetteAmmo',    url_6mm_enabled,
                                               projectileMats[url_6mm_projMat], url_6mm_projAmt,   url_6mm_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_6mm_casingMat],   url_6mm_casingAmt, url_6mm_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_6mm_powderMat],   url_6mm_powderAmt, url_6mm_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_6mm_speed);
            addRecipe('HDSpent6mmFlechette',   url_6mm_enabled,
                                               null,                            0,                 0.00,
                                               casingMats[url_6mm_casingMat],   url_6mm_casingAmt, url_6mm_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                            0,                 0.00,
                                               url_6mm_speed);
        }

        // 10mm Auto
        if (url_10mm_enabled) {
            addRecipe('HD10mAmmo',             url_10mm_enabled,
                                               projectileMats[url_10mm_projMat], url_10mm_projAmt,   url_10mm_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_10mm_casingMat],   url_10mm_casingAmt, url_10mm_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_10mm_powderMat],   url_10mm_powderAmt, url_10mm_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_10mm_speed);
            addRecipe('TenMilBrass',           url_10mm_enabled,
                                               null,                             0,                  0.00,
                                               casingMats[url_10mm_casingMat],   url_10mm_casingAmt, url_10mm_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                             0,                  0.00,
                                               url_10mm_speed);
        }

        // 20mm Grenades
        if (url_20mm_enabled) {
            addRecipe('WAN_20mmGrenadeAmmo',   url_20mm_enabled,
                                               projectileMats[url_20mm_projMat], url_20mm_projAmt,   url_20mm_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_20mm_casingMat],   url_20mm_casingAmt, url_20mm_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_20mm_powderMat],   url_20mm_powderAmt, url_20mm_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_20mm_speed);
        }

        //.30-06
        if (url_3006_enabled) {
            addRecipe('ThirtyAughtSixAmmo',    url_3006_enabled,
                                               projectileMats[url_3006_projMat], url_3006_projAmt,   url_3006_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_3006_casingMat],   url_3006_casingAmt, url_3006_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_3006_powderMat],   url_3006_powderAmt, url_3006_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_3006_speed);
            addRecipe('ThirtyAughtSixBrass',   url_3006_enabled,
                                               null,                             0,                  0.00,
                                               casingMats[url_3006_casingMat],   url_3006_casingAmt, url_3006_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                             0,                  0.00,
                                               url_3006_speed);
        }

        // .45 ACP
        if (url_45acp_enabled) {
            addRecipe('HD45ACPAmmo',           url_45acp_enabled,
                                               projectileMats[url_45acp_projMat], url_45acp_projAmt,   url_45acp_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_45acp_casingMat],   url_45acp_casingAmt, url_45acp_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_45acp_powderMat],   url_45acp_powderAmt, url_45acp_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_45acp_speed);
            addRecipe('HDSpent45ACP',          url_45acp_enabled,
                                               null,                              0,                   0.00,
                                               casingMats[url_45acp_casingMat],   url_45acp_casingAmt, url_45acp_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                              0,                   0.00,
                                               url_45acp_speed);
        }

        // .45 LC
        if (url_45lc_enabled) {
            addRecipe('HD45LCAmmo',            url_45lc_enabled,
                                               projectileMats[url_45lc_projMat], url_45lc_projAmt,   url_45lc_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_45lc_casingMat],   url_45lc_casingAmt, url_45lc_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_45lc_powderMat],   url_45lc_powderAmt, url_45lc_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_45lc_speed);
            addRecipe('HDSpent45LC',           url_45lc_enabled,
                                               null,                             0,                  0.00,
                                               casingMats[url_45lc_casingMat],   url_45lc_casingAmt, url_45lc_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                             0,                  0.00,
                                               url_45lc_speed);
        }

        // .45 Golden LC
        if (url_g45lc_enabled) {
            addRecipe('HDGold45LCAmmo',        url_g45lc_enabled,
                                               projectileMats[url_g45lc_projMat], url_g45lc_projAmt,   url_g45lc_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_g45lc_casingMat],   url_g45lc_casingAmt, url_g45lc_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_g45lc_powderMat],   url_g45lc_powderAmt, url_g45lc_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_g45lc_speed);
            addRecipe('HDSpentGold45lc',       url_g45lc_enabled,
                                               null,                              0,                   0.00,
                                               casingMats[url_g45lc_casingMat],   url_g45lc_casingAmt, url_g45lc_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                              0,                   0.00,
                                               url_g45lc_speed);
        }

        // .50 AE
        if (url_50ae_enabled) {
            addRecipe('HD50AEAmmo',            url_50ae_enabled,
                                               projectileMats[url_50ae_projMat], url_50ae_projAmt,   url_50ae_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_50ae_casingMat],   url_50ae_casingAmt, url_50ae_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_50ae_powderMat],   url_50ae_powderAmt, url_50ae_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_50ae_speed);
            addRecipe('HDSpent50AE',           url_50ae_enabled,
                                               null,                             0,                  0.00,
                                               casingMats[url_50ae_casingMat],   url_50ae_casingAmt, url_50ae_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                             0,                  0.00,
                                               url_50ae_speed);
        }
        
        // .50 Action-Mega
        if (url_50am_enabled) {
            addRecipe('HD50AM_Ammo',           url_50am_enabled,
                                               projectileMats[url_50am_projMat], url_50am_projAmt,   url_50am_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_50am_casingMat],   url_50am_casingAmt, url_50am_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_50am_powderMat],   url_50am_powderAmt, url_50am_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_50am_speed);
            addRecipe('HDSpent50AM',           url_50am_enabled,
                                               null,                             0,                  0.00,
                                               casingMats[url_50am_casingMat],   url_50am_casingAmt, url_50am_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                             0,                  0.00,
                                               url_50am_speed);
        }

        // .50 OMG
        if (url_50omg_enabled) {
            addRecipe('HD50OMGAmmo',           url_50omg_enabled,
                                               projectileMats[url_50omg_projMat], url_50omg_projAmt,   url_50omg_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_50omg_casingMat],   url_50omg_casingAmt, url_50omg_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_50omg_powderMat],   url_50omg_powderAmt, url_50omg_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_50omg_speed);
            addRecipe('HDSpent50OMG',          url_50omg_enabled,
                                               null,                              0,                   0.00,
                                               casingMats[url_50omg_casingMat],   url_50omg_casingAmt, url_50omg_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                              0,                   0.00,
                                               url_50omg_speed);
        }

        // 56cal Lead Ball
        if (url_mball_enabled) {
            addRecipe('HDBallAmmo',            url_mball_enabled,
                                               projectileMats[url_mball_projMat], url_mball_projAmt,   url_mball_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_mball_casingMat],   url_mball_casingAmt, url_mball_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_mball_powderMat],   url_mball_powderAmt, url_mball_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_mball_speed);
        }

        // .451 Frei
        if (url_420_enabled) {
            addRecipe('HDAurochsAmmo',         url_420_enabled,
                                               projectileMats[url_420_projMat], url_420_projAmt,   url_420_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_420_casingMat],   url_420_casingAmt, url_420_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_420_powderMat],   url_420_powderAmt, url_420_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_420_speed);
            addRecipe('HDSpent420',            url_420_enabled,
                                               null,                            0,                 0.00,
                                               casingMats[url_420_casingMat],   url_420_casingAmt, url_420_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                            0,                 0.00,
                                               url_420_speed);
        }

        // .066 Bore Shell
        if (url_069_enabled) {
            addRecipe('HD069BoreAmmo',         url_069_enabled,
                                               projectileMats[url_069_projMat], url_069_projAmt,   url_069_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_069_casingMat],   url_069_casingAmt, url_069_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_069_powderMat],   url_069_powderAmt, url_069_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_069_speed);
            addRecipe('HDSpent069Bore',        url_069_enabled,
                                               null,                            0,                 0.00,
                                               casingMats[url_069_casingMat],   url_069_casingAmt, url_069_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                            0,                 0.00,
                                               url_069_speed);
        }

        // .300 Savage
        if (url_300savage_enabled) {
            addRecipe('Savage300Ammo',         url_3006_enabled,
                                               projectileMats[url_300savage_projMat], url_300savage_projAmt,   url_300savage_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_300savage_casingMat],   url_300savage_casingAmt, url_300savage_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_300savage_powderMat],   url_300savage_powderAmt, url_300savage_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_300savage_speed);
            addRecipe('Savage300Brass',        url_3006_enabled,
                                               null,                                  0,                       0.00,
                                               casingMats[url_300savage_casingMat],   url_300savage_casingAmt, url_300savage_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                                  0,                       0.00,
                                               url_300savage_speed);
        }

        // .500 S&W
        if (url_500sw_enabled) {
            addRecipe('HD500SWLightAmmo',      url_500sw_enabled,
                                               projectileMats[url_500swl_projMat], url_500swl_projAmt,   url_500swl_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_500sw_casingMat],   url_500sw_casingAmt, url_500sw_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_500sw_powderMat],   url_500sw_powderAmt, url_500sw_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_500sw_speed);
            addRecipe('HD500SWHeavyAmmo',      url_500sw_enabled,
                                               projectileMats[url_500swh_projMat], url_500swh_projAmt,   url_500swh_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_500sw_casingMat],   url_500sw_casingAmt, url_500sw_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_500sw_powderMat],   url_500sw_powderAmt, url_500sw_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_500sw_speed);
            addRecipe('HDSpent500',            url_500sw_enabled,
                                               null,                              0,                   0.00,
                                               casingMats[url_500sw_casingMat],   url_500sw_casingAmt, url_500sw_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                              0,                   0.00,
                                               url_500sw_speed);
        }

        // .762 Tokarev
        if (url_762tokarev_enabled) {
            addRecipe('HD762TokarevAmmo',      url_762tokarev_enabled,
                                               projectileMats[url_762tokarev_projMat], url_762tokarev_projAmt,   url_762tokarev_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_762tokarev_casingMat],   url_762tokarev_casingAmt, url_762tokarev_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_762tokarev_powderMat],   url_762tokarev_powderAmt, url_762tokarev_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_762tokarev_speed);
            addRecipe('TokarevBrass',          url_762tokarev_enabled,
                                               null,                                   0,                        0.00,
                                               casingMats[url_762tokarev_casingMat],   url_762tokarev_casingAmt, url_762tokarev_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                                   0,                        0.00,
                                               url_762tokarev_speed);
        }

        // Birdshot Shells
        if (url_birdshot_enabled) {
            addRecipe('HDBirdshotShellAmmo',   url_birdshot_enabled,
                                               projectileMats[url_birdshot_projMat], url_birdshot_projAmt,   url_birdshot_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_birdshot_casingMat],   url_birdshot_casingAmt, url_birdshot_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_birdshot_powderMat],   url_birdshot_powderAmt, url_birdshot_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_birdshot_speed);
            addRecipe('HDSpentBirdshotShell',  url_birdshot_enabled,
                                               null,                                 0,                      0.00,
                                               casingMats[url_birdshot_casingMat],   url_birdshot_casingAmt, url_birdshot_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                                 0,                      0.00,
                                               url_birdshot_speed);
        }

        // Explosive Shells
        if (url_explosiveShells_enabled) {
            addRecipe('HDExplosiveShellAmmo',  url_explosiveShells_enabled,
                                               projectileMats[url_explosiveShells_projMat], url_explosiveShells_projAmt,   url_explosiveShells_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_explosiveShells_casingMat],   url_explosiveShells_casingAmt, url_explosiveShells_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_explosiveShells_powderMat],   url_explosiveShells_powderAmt, url_explosiveShells_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_explosiveShells_speed);
            addRecipe('HDSpentExplosiveShell', url_explosiveShells_enabled,
                                               null,                                        0,                             0.00,
                                               casingMats[url_explosiveShells_casingMat],   url_explosiveShells_casingAmt, url_explosiveShells_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                                        0,                             0.00,
                                               url_explosiveShells_speed);
        }

        // Flare Shells
        if (url_flareShells_enabled) {
            addRecipe('HDFlareAmmo',           url_flareShells_enabled,
                                               projectileMats[url_flareShells_projMat], url_flareShells_projAmt,   url_flareShells_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_flareShells_casingMat],   url_flareShells_casingAmt, url_flareShells_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_flareShells_powderMat],   url_flareShells_powderAmt, url_flareShells_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_flareShells_speed);
        }

        // Less-Lethal Shells
        if (url_llShells_enabled) {
            addRecipe('HDLLShellAmmo',         url_llShells_enabled,
                                               projectileMats[url_llShells_projMat], url_llShells_projAmt,   url_llShells_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_llShells_casingMat],   url_llShells_casingAmt, url_llShells_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_llShells_powderMat],   url_llShells_powderAmt, url_llShells_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_llShells_speed);
            addRecipe('HDLLSpentShell',        url_llShells_enabled,
                                               null,                                 0,                      0.00,
                                               casingMats[url_llShells_casingMat],   url_llShells_casingAmt, url_llShells_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                                 0,                      0.00,
                                               url_llShells_speed);
        }

        // 12ga Slugs
        if (url_12gaSlugs_enabled) {
            addRecipe('HDSlugAmmo',            url_12gaSlugs_enabled,
                                               projectileMats[url_12gaSlugs_projMat], url_12gaSlugs_projAmt,   url_12gaSlugs_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_12gaSlugs_casingMat],   url_12gaSlugs_casingAmt, url_12gaSlugs_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_12gaSlugs_powderMat],   url_12gaSlugs_powderAmt, url_12gaSlugs_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_12gaSlugs_speed);
            addRecipe('HDSpentSlug',           url_12gaSlugs_enabled,
                                               null,                                  0,                       0.00,
                                               casingMats[url_12gaSlugs_casingMat],   url_12gaSlugs_casingAmt, url_12gaSlugs_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                                  0,                       0.00,
                                               url_12gaSlugs_speed);
        }

        // Thunder Rockets
        if (url_thunderRocket_enabled) {
            addRecipe('Wan_ThuRKTAmmo',        url_thunderRocket_enabled,
                                               projectileMats[url_thunderRocket_projMat], url_thunderRocket_projAmt,   url_thunderRocket_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_thunderRocket_casingMat],   url_thunderRocket_casingAmt, url_thunderRocket_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_thunderRocket_powderMat],   url_thunderRocket_powderAmt, url_thunderRocket_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_thunderRocket_speed);
        }

        // Tortoise Rockets
        if (url_tortoiseRocket_enabled) {
            addRecipe('Wan_TortRKTAmmo',       url_tortoiseRocket_enabled,
                                               projectileMats[url_tortoiseRocket_projMat], url_tortoiseRocket_projAmt,   url_tortoiseRocket_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_tortoiseRocket_casingMat],   url_tortoiseRocket_casingAmt, url_tortoiseRocket_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_tortoiseRocket_powderMat],   url_tortoiseRocket_powderAmt, url_tortoiseRocket_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_tortoiseRocket_speed);
        }


        // PEPPERGRINDER

        // 9mm NDM
        if (url_ndm_enabled) {
            addRecipe('HDNDMLoose',            url_ndm_enabled,
                                               projectileMats[url_ndm_projMat], url_ndm_projAmt,   url_ndm_projAmt * (url_disassemble_ratio * 0.01),
                                               casingMats[url_ndm_casingMat],   url_ndm_casingAmt, url_ndm_casingAmt * (url_disassemble_ratio * 0.01),
                                               powderMats[url_ndm_powderMat],   url_ndm_powderAmt, url_ndm_powderAmt * (url_disassemble_ratio * 0.01),
                                               url_ndm_speed);
            addRecipe('HDSpentNDM',            url_ndm_enabled,
                                               null,                            0,                 0.00,
                                               casingMats[url_ndm_casingMat],   url_ndm_casingAmt, url_ndm_casingAmt * (url_disassemble_ratio * 0.01),
                                               null,                            0,                 0.00,
                                               url_ndm_speed);
        }

        // Hide Unused Materials from Backpacks
        foreach (cls : AllActorClasses) {

            let matClass = (Class<HDRel_CraftingMaterial>)(cls);

            // Only consider non-abstract Crafting Material child classes that haven't already been disabled
            // FIXME: attempting to find the current cls in the backpackBlacklist array crashdumps GZDoom :shrug: [UZ]
            if (matClass && !matClass.isAbstract() /* && backpackBlacklist.find(cls) != backpackBlacklist.size() */) {
                let found = false;

                foreach (recipe : recipes) {
                    if (hd_debug && recipe.ammoClass) console.printf("Checking '"..recipe.ammoClass.getClassName().."' Recipe for '"..cls.getClassName().."' Material...");

                    foreach(material : recipe.materials) {
                        if (material && material.getClassName() == matClass.getClassName()) {
                            if (hd_debug) console.printf("Found  '"..matClass.getClassName().."' Material.");
                            
                            found = true;
                            
                            break;
                        }
                    }

                    if (found) break;
                }

                if (!found) {
                    if (hd_debug) console.printf("'"..matClass.getClassName().."' Not found in any recipe");

                    backpackBlacklist.push(matClass);
                }
            }
        }
    }

    // Random stuff, stores it and forces negative values just to be 0.
    bool giveRandom(int chance) {
        if (chance > -1) {
            let result = random(0, chance);

			if (hd_debug) console.printf("Rolled a "..(result + 1).." out of "..(chance + 1));

            return result == 0;
        }

        return false;
    }

    // Tries to replace the item during spawning.
    bool tryReplaceItem(ReplaceEvent e, string spawnName, int chance) {
        if (giveRandom(chance)) {
            if (hd_debug) console.printf(e.replacement.getClassName().." -> "..spawnName);

            e.replacement = spawnName;

            return true;
        }

        return false;
    }

    // Tries to create the item via random spawning.
    bool tryCreateItem(Actor thing, string spawnName, int chance) {
		if (giveRandom(chance)) {
            if (hd_debug) console.printf(thing.getClassName().." + "..spawnName);

            Actor.Spawn(spawnName, thing.pos);

            return true;
            }

        return false;
    }

	override void worldLoaded(WorldEvent e) {

        // Populates the main arrays if they haven't been already. 
        if (!cvarsAvailable) init();

        foreach (bl : backpackBlacklist) {
			if (hd_debug) console.printf("Removing "..bl.getClassName().." from Backpack Spawn Pool");
                
			BPSpawnPool.removeItem(bl);
        }
	}

    override void checkReplacement(ReplaceEvent e) {

        // If there's nothing to replace or if the replacement is final, quit.
        if (!e.replacement || e.isFinal) return;

        // If thing being replaced is blacklisted, quit.
        foreach (bl : blacklist) if (e.replacement is bl) return;

        string candidateName = e.replacement.getClassName();

        // If current map is Range, quit.
        if (level.MapName == 'RANGE') return;

        handleItemReplacements(e, candidateName);
    }

	override void worldThingSpawned(WorldEvent e) {

        // If thing spawned doesn't exist, quit.
		if (!e.thing) return;

        // If thing spawned is blacklisted, quit.
		foreach (bl : blacklist) if (e.thing is bl) return;

		string candidateName = e.thing.getClassName();

        // Pointers for specific classes.
        let material = HDRel_CraftingMaterial(e.thing);
        let reloader = HDUniversalReloader(e.thing);

        // If the thing spawned is a crafting material, add any and all items that can use this.
        if (material) handleMaterialUses(material, candidateName);

        // If the thing spawned is a Universal Reloader, copy all the registered recipes.
        if (reloader) reloader.addRecipes(recipes);

        // If current map is Range, quit.
        if (level.MapName == 'RANGE') return;

        handleItemSpawns(e.thing, material, candidateName);
    }

    private void handleMaterialUses(HDRel_CraftingMaterial material, string candidateName) {
        foreach (ammoSpawn : ammoSpawnList) if (candidateName ~== ammoSpawn.ammoName) {
            if (hd_debug) {
                console.printf("Adding the following to the list of items that use "..material.getClassName().."");
                foreach (weapon : ammoSpawn.weaponNames) console.printf("* "..weapon);
			}

            material.itemsThatUseThis.append(ammoSpawn.weaponNames);
        }
    }

    private void handleItemReplacements(ReplaceEvent e, string candidateName) {

        // Checks if the level has been loaded more than 1 tic.
        bool prespawn = !(level.maptime > 1);

        // Iterates through the list of item candidates for e.thing.
        foreach (itemSpawn : itemSpawnList) {

            if ((prespawn || itemSpawn.isPersistent) && itemSpawn.replaceItem) {
                foreach (spawnReplace : itemSpawn.spawnReplaces) {
                    if (spawnReplace.name ~== candidateName) {
                        if (hd_debug) console.printf("Attempting to replace "..candidateName.." with "..itemSpawn.spawnName.."...");

                        if (tryReplaceItem(e, itemSpawn.spawnName, spawnReplace.chance)) return;
                    }
                }
            }
        }
    }

    private void handleItemSpawns(Actor thing, HDRel_CraftingMaterial material, string candidateName) {
        
        // Checks if the level has been loaded more than 1 tic.
        bool prespawn = !(level.maptime > 1);

        // Iterates through the list of item candidates for e.thing.
        foreach (itemSpawn : itemSpawnList) {
            
            // if an item is owned or is an ammo (doesn't retain owner ptr), 
            // do not replace it. 
            let item = Inventory(thing);
            if (
                (prespawn || itemSpawn.isPersistent)
             && (!(item && item.owner) && (!material || prespawn))
             && !itemSpawn.replaceItem
            ) {
                foreach (spawnReplace : itemSpawn.spawnReplaces) {
                    if (spawnReplace.name ~== candidateName) {
                        if (hd_debug) console.printf("Attempting to spawn "..itemSpawn.spawnName.." with "..candidateName.."...");

                        if (tryCreateItem(thing, itemSpawn.spawnName, spawnReplace.chance)) return;
                    }
                }
            }
        }
    }
}
